{"version":3,"sources":["scripts/main.js"],"names":["notifications","ruleForName","ruleForPosition","ruleForOffice","ruleForAge","ruleForSalary","ruleForIncorrectField","createNotification","title","description","type","notification","document","createElement","className","dataset","qa","insertAdjacentHTML","body","append","setTimeout","remove","showNotification","field","validation","numbers","offices","incorrectField","checkFormCorrectness","form","isNameCorrect","checkNameCorrectness","name","value","isAgeCorrect","checkAgeCorrectness","age","isPositionCorrect","checkPositionCorrectness","position","employeeName","split","some","symbol","includes","length","checkOfficeCorrectness","office","employeeAge","Number","isNaN","checkSalaryCorrectness","salary","employeeSalary","checkInputCorrectness","fieldName","fieldValue","table","querySelector","sortedRow","selectedRow","editedCell","addEventListener","e","columnHeader","target","tHead","contains","sortDirection","columnIndex","cellIndex","sortedRows","tBodies","rows","sort","rowA","rowB","sortInDirection","cells","innerText","rowAData","rowBData","dataA","dataB","startsWith","slice","replaceAll","localeCompare","row","closest","tBody","classList","toggle","cell","tagName","oldCellData","innerHTML","input","firstElementChild","focus","changeCellData","ev","code","headerName","trim","toLowerCase","inputData","toLocaleString","textContent","addingForm","forms","preventDefault","addEmployee","clearAddingForm","options","selected"],"mappings":"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","file":"main.e102e5e2.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst notifications = {\n  ruleForName: 'Name shouldn\\'t be less than 4 letters and contain any number',\n  ruleForPosition: (\n    'Position shouldn\\'t be less than 4 letters and contain any number'\n  ),\n  ruleForOffice: (\n    'Office shouldn\\'t be less than 3 letters and contain any number'\n  ),\n  ruleForAge: 'Age shouldn\\'t be less than 18 and more than 90',\n  ruleForSalary: 'Salary should only contain numbers',\n  ruleForIncorrectField: 'It looks like you have given a wrong field value',\n\n  createNotification(title, description, type) {\n    const notification = document.createElement('div');\n\n    notification.className = `notification ${type}`;\n    notification.dataset.qa = 'notification';\n\n    notification.insertAdjacentHTML('afterbegin', `\n      <h2 class='title'>${title}</h2>\n  \n      <p>${description}</p>\n    `);\n\n    document.body.append(notification);\n\n    setTimeout(() => {\n      notification.remove();\n    }, 4000);\n  },\n\n  showNotification(field) {\n    switch (field) {\n      case 'form-success':\n        this.createNotification(\n          'Success',\n          'The new employee has been added to the table',\n          'success'\n        );\n        break;\n\n      case 'input-success':\n        this.createNotification(\n          'Success',\n          'The data has been updated',\n          'success'\n        );\n        break;\n\n      case 'name':\n        this.createNotification(\n          'Name is invalid',\n          notifications.ruleForName,\n          'error'\n        );\n        break;\n\n      case 'position':\n        this.createNotification(\n          'Position is invalid',\n          notifications.ruleForPosition,\n          'error'\n        );\n        break;\n\n      case 'office':\n        this.createNotification(\n          'Office is invalid',\n          notifications.ruleForOffice,\n          'error'\n        );\n        break;\n\n      case 'age':\n        this.createNotification(\n          'Age is invalid',\n          notifications.ruleForAge,\n          'error'\n        );\n        break;\n\n      case 'salary':\n        this.createNotification(\n          'Salary field has invalid symbol',\n          notifications.ruleForSalary,\n          'error'\n        );\n        break;\n\n      default:\n        this.createNotification(\n          'Opps, something went wrong',\n          notifications.ruleForIncorrectField,\n          'error'\n        );\n        break;\n    }\n  },\n};\nconst validation = {\n  numbers: '0123456789',\n  offices: [\n    'Tokyo', 'Singapore', 'London', 'New York', 'Edinburgh', 'San Francisco',\n  ],\n  incorrectField: '',\n\n  checkFormCorrectness(form) {\n    const isNameCorrect = this.checkNameCorrectness(form.name.value);\n    const isAgeCorrect = this.checkAgeCorrectness(form.age.value);\n    const isPositionCorrect = this\n      .checkPositionCorrectness(form.position.value);\n\n    if (\n      !isNameCorrect\n      || !isAgeCorrect\n      || !isPositionCorrect\n    ) {\n      return false;\n    }\n\n    return true;\n  },\n\n  checkNameCorrectness(employeeName) {\n    if (\n      employeeName.split('').some(symbol => this.numbers.includes(symbol))\n      || employeeName.length < 4\n    ) {\n      this.incorrectField = 'name';\n\n      return false;\n    }\n\n    return true;\n  },\n\n  checkPositionCorrectness(position) {\n    if (\n      position.split('').some(symbol => this.numbers.includes(symbol))\n      || position.length < 4\n    ) {\n      this.incorrectField = 'position';\n\n      return false;\n    }\n\n    return true;\n  },\n\n  checkOfficeCorrectness(office) {\n    if (\n      office.split('').some(symbol => this.numbers.includes(symbol))\n      || office.length < 4\n    ) {\n      this.incorrectField = 'office';\n\n      return false;\n    }\n\n    return true;\n  },\n\n  checkAgeCorrectness(age) {\n    const employeeAge = Number(age);\n\n    if (\n      isNaN(employeeAge)\n      || employeeAge < 18\n      || employeeAge > 90\n    ) {\n      this.incorrectField = 'age';\n\n      return false;\n    }\n\n    return true;\n  },\n\n  checkSalaryCorrectness(salary) {\n    const employeeSalary = Number(salary);\n\n    if (\n      isNaN(employeeSalary)\n    ) {\n      this.incorrectField = 'salary';\n\n      return false;\n    }\n\n    return true;\n  },\n\n  checkInputCorrectness(fieldName, fieldValue) {\n    switch (fieldName) {\n      case 'name':\n        return this.checkNameCorrectness(fieldValue);\n\n      case 'position':\n        return this.checkPositionCorrectness(fieldValue);\n\n      case 'office':\n        return this.checkOfficeCorrectness(fieldValue);\n\n      case 'age':\n        return this.checkAgeCorrectness(fieldValue);\n\n      case 'salary':\n        return this.checkSalaryCorrectness(fieldValue);\n\n      default:\n        return true;\n    }\n  },\n};\nconst table = document.querySelector('table');\n\ntable.sortedRow = null;\ntable.selectedRow = null;\ntable.editedCell = null;\n\ntable.addEventListener('click', function(e) {\n  const columnHeader = e.target;\n\n  if (!table.tHead.contains(columnHeader)) {\n    return;\n  }\n\n  if (table.sortedRow && columnHeader !== table.sortedRow) {\n    table.sortedRow.sortDirection = '';\n  }\n\n  if (!columnHeader.sortDirection) {\n    columnHeader.sortDirection = 'asc';\n    table.sortedRow = columnHeader;\n  }\n\n  const columnIndex = columnHeader.cellIndex;\n  let sortedRows = null;\n\n  if (columnHeader.sortDirection === 'asc') {\n    sortedRows = [...table.tBodies[0].rows]\n      .sort((rowA, rowB) => {\n        return sortInDirection(\n          rowA.cells[columnIndex].innerText,\n          rowB.cells[columnIndex].innerText\n        );\n      });\n\n    columnHeader.sortDirection = 'desc';\n  } else {\n    sortedRows = [...table.tBodies[0].rows]\n      .sort((rowA, rowB) => {\n        return sortInDirection(\n          rowB.cells[columnIndex].innerText,\n          rowA.cells[columnIndex].innerText\n        );\n      });\n\n    columnHeader.sortDirection = 'asc';\n  }\n\n  table.tBodies[0].append(...sortedRows);\n\n  function sortInDirection(rowAData, rowBData) {\n    let dataA = rowAData;\n    let dataB = rowBData;\n\n    if (dataA.startsWith('$')) {\n      dataA = dataA.slice(1).replaceAll(',', '');\n      dataB = dataB.slice(1).replaceAll(',', '');\n    } else if (isNaN(Number(dataA))) {\n      return dataA.localeCompare(dataB);\n    }\n\n    return Number(dataA) - Number(dataB);\n  }\n});\n\ntable.addEventListener('click', function(e) {\n  const row = e.target.closest('tr');\n\n  if (![...table.tBodies].some(tBody => tBody.contains(row))) {\n    return;\n  }\n\n  if (!table.selectedRow) {\n    table.selectedRow = row;\n  }\n\n  if (row !== table.selectedRow) {\n    table.selectedRow.classList.remove('active');\n    table.selectedRow = row;\n  }\n\n  row.classList.toggle('active');\n});\n\ntable.addEventListener('dblclick', function(e) {\n  const cell = e.target;\n\n  if (\n    cell.tagName !== 'TD'\n    || table.editedCell\n    || ![...table.tBodies].some(tBody => tBody.contains(cell))\n  ) {\n    return;\n  }\n\n  table.editedCell = cell;\n\n  const oldCellData = cell.innerText;\n\n  cell.innerHTML = '<input class=\"cell-input\">';\n\n  const input = cell.firstElementChild;\n\n  input.focus();\n\n  input.addEventListener('blur', function() {\n    changeCellData();\n  });\n\n  input.addEventListener('keydown', function(ev) {\n    if (ev.code !== 'Enter') {\n      return;\n    }\n\n    changeCellData();\n  });\n\n  function changeCellData() {\n    const headerName = table\n      .tHead\n      .rows[0]\n      .cells[cell.cellIndex]\n      .innerText\n      .trim()\n      .toLowerCase();\n    let inputData = input.value;\n\n    if (\n      inputData !== ''\n      && !validation.checkInputCorrectness(headerName, inputData)\n    ) {\n      notifications.showNotification(headerName);\n      input.focus();\n\n      return;\n    }\n\n    if (headerName === 'salary') {\n      inputData = '$' + Number(inputData).toLocaleString();\n    }\n\n    if (inputData === '') {\n      cell.innerText = oldCellData;\n      table.editedCell = null;\n\n      return;\n    }\n\n    cell.textContent = inputData;\n    notifications.showNotification('input-success');\n    validation.incorrectField = '';\n    table.editedCell = null;\n  }\n});\n\ntable.insertAdjacentHTML('afterend', `\n  <form name=\"adding-employee\" class=\"new-employee-form\">\n    <label>\n      Name:\n      <input\n        name=\"name\"\n        type=\"text\"\n        data-qa=\"name\"\n        required\n      >\n    </label>\n\n    <label>\n      Position:\n      <input\n        name=\"position\"\n        type=\"text\"\n        data-qa=\"position\"\n        required\n      >\n    </label>\n\n    <label>\n      Office:\n      <select\n        name=\"office\"\n        data-qa=\"office\"\n        required\n      >\n        <option value=\"Tokyo\">Tokyo</option>\n        <option value=\"Singapore\">Singapore</option>\n        <option value=\"London\">London</option>\n        <option value=\"New York\">New York</option>\n        <option value=\"Edinburgh\">Edinburgh</option>\n        <option value=\"San Francisco\">San Francisco</option>\n      </select>\n    </label>\n\n    <label>\n      Age:\n      <input\n        name=\"age\"\n        type=\"number\"\n        data-qa=\"age\"\n        required\n      >\n    </label>\n\n    <label>\n      Salary:\n      <input\n        name=\"salary\"\n        type=\"number\"\n        data-qa=\"salary\"\n        required\n      >\n    </label>\n\n    <button type=\"submit\">Save to table</button>\n  </form>\n`);\n\nconst addingForm = document.forms['adding-employee'];\n\naddingForm.addEventListener('submit', function(e) {\n  e.preventDefault();\n\n  if (!validation.checkFormCorrectness(addingForm)) {\n    addingForm[validation.incorrectField].focus();\n    notifications.showNotification(validation.incorrectField);\n    validation.incorrectField = '';\n\n    return;\n  }\n\n  addEmployee();\n  clearAddingForm();\n  notifications.showNotification('form-success');\n\n  function addEmployee() {\n    const { name: employeeName, position, office, age, salary } = addingForm;\n\n    table.tBodies[0].insertAdjacentHTML('beforeend', `\n      <tr>\n        <td>${employeeName.value}</td>\n        <td>${position.value}</td>\n        <td>${office.value}</td>\n        <td>${age.value}</td>\n        <td>${'$' + Number(salary.value).toLocaleString()}</td>\n      </tr>\n    `);\n  }\n\n  function clearAddingForm() {\n    for (const input of addingForm) {\n      if (input.tagName === 'SELECT') {\n        input.options[0].selected = true;\n\n        continue;\n      }\n\n      input.value = '';\n    }\n  }\n});\n"]}